# Exercise 8

## Angaben

### Aufgabensystem 1
Aufgabe     Periode[ms]  Phase[ms]   WCET[ms]   Betriebsmittel¹
T1              20          4           6       (R1, 3, 1)
T2              50          3           4
T3              200         1           9       (R1, 1, 7)

### Aufgabensystem 2
Aufgabe     Periode[ms]  Phase[ms]   WCET[ms]   Betriebsmittel¹
T4              20          7           2       (R2, 1, 1)
T5              50          5           6       (R2, 1, 5) (R3, 3, 2)
T6              100         3           6       (R3, 1, 5) (R4, 4, 2)
T7              200         1           10      (R4, 1, 9)

### Aufgabensystem 3
Aufgabe     Periode[ms]  Phase[ms]   WCET[ms]   Betriebsmittel¹
T8              20          3           6       (R5, 1, 5) (R6, 4, 1)
T9              50          8           12
T10             200         1           6       (R6, 1, 5) (R5, 5, 1)

---
## Bearbeitung

### Teilaufgabe 1:
*Welche Bedingungen müssen erfüllt sein, damit es zu einer Verklemmung (engl. Deadlock) kommen kann?*
    - keine preemption
    - hold and wait
    - mutual exclusion
    - circular wait

### Teilaufgabe 2:
    Blockierzeit, die Zeit, die auf das Betriebsmittel gewartet wird

## Teilaufgabe 3:
    Blockierungszeit <= Summe(wcets aller niedrigerprioren Auftraege)

## Teilaufgabe 4:
    abhaengig von Strategie zur Zugriffskontrolle, werden ggf. blockiert oder auch nicht

## Teilaufgabe 6:
    max. Blockierungszeit: 7ms

## Teilaufgabe 7:
    nein, weil kein hold and wait

## Teilaufgabe 8:
    werden zwangslaufig auch verzoegert

## Teilaufgabe 11:
    kann max. min(Anzahl Betriebsmittel, Anzahl niederpriore Threads) mal blockiert werden
    max. max(Haltezeit) lang
    hier: min(3, 3) * 9 = 27

## Teilaufgabe 12:
    Verklemmungen immer nocht moeglich, weil keine der Bedingungen durch Prioritaetsvererbung ausser Kraft gesetzt
    hier: keine Verklemmungen weil kein circular wait

## Teilaufgabe 13:
    keine Nachteile durch niederpriore threads,
    aber: warten auf eigentlich niederpriore Threads mit erhoehten Prioritaeten

## Teilaufgabe 16:
    Summe(max.Haltezeit(Betriebsmittel, die vom hoechstprioren Thread angefordert werden))
    Messen:
        Messung Zeitpunkt blockade bis Zeitpunkt Wiedereinlastung

## Teilaufgabe 17:
    keine Verklemmungen, da circular wait verhindert wird

## Teilaufgabe 18:
    werden ggf. laenger von hoeherprioren Aufgaben aufgehalten, die auf Betriebsmittel warten
    ansonsten keine direkten nachteile

## Teilaufgabe 20:
    stapelbasiert: Threads werden nur eingelastet, wenn alle benoetigte Betriebsmittel zugeteilt werden koennen
    hier: T8 wird gar nicht erst eingelastet

## Teilaufgabe 21:
    nicht stapelbasiert: hoeherpriore Threads werden eingelastet und bei Betriebsmittelanforderung ggf blockiert
    dynamische Prioritaeten: Obergrenzen muessen bei Prioritaetsaenderungen aktualisiert werden

## Teiaufgabe 22:
    kein circular wait

## Teilaufgabe 23:
    Wieso keine Verdraengung von T7???

## Teilaufgabe 24:
    Das tut das selbe wie in Teilaufgabe23???

## Teilaufgabe 25:
    T8 und T10 laufen jew nur einmal -> Deadlock, weil circular wait nicht verhindert
